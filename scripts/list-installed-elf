#!/bin/sh

SHORT_DESCRIPTION="List ELF file's package, repo and PV-signature."

#******************************************************************************#
#                                 functions                                    #
#******************************************************************************#

usage() {
cat >&2 <<-EOF

$SHORT_DESCRIPTION

Usage:

  curl https://sh.polyverse.io | sh -s list-installed-elf [<options>]

Options:

  --help                 Display usage.

EOF
}

apt_list() {
	PKGS="$(apt list --installed 2>/dev/null | tail -n +2 | awk -F/ '{print $1}')"
	echo "$PKGS" | while read PACKAGE; do
		POLICY="$(apt-cache policy $PACKAGE)"
		REPO="$(echo "$POLICY" | awk '/\*\*\*/,/100 /' | grep http | awk '{print $2}' | xargs | sed 's/ /,/g')"
		FILES="$(dpkg-query -L $PACKAGE)"
		for FILE in $FILES; do
                        HEAD="$(head -c 4 $FILE 2>/dev/null | grep "ELF")"
                        if [ ! -z "$HEAD" ]; then
                                if [ ! -z "$(strings $FILE | grep "\-PV\-")" ]; then
                                        SIG="true"
                                else
                                        SIG="false"
                                fi
                                echo "$PACKAGE $REPO $SIG $FILE"
                        fi
		done
	done
}

apk_list() {
        PACKAGES="$(apk info 2>/dev/null)"

        for PACKAGE in $PACKAGES; do
                POLICY="$(apk policy $PACKAGE 2>/dev/null | grep lib/apk/db/installed -A 1 -B 1)"
                REPO="$(echo "$POLICY" | grep lib/apk/db/installed -A 1 -B 1 | head -n 3 | tail -n 1 | grep http | sed -e 's/alpine.*@//g' | xargs)"
                if [ -z "$REPO" ]; then
                        REPO="(local)"
                fi
		FILES="$(apk info -L $PACKAGE | grep -v "contains:" | sed '/^\s*$/d')"
                for FILE in $FILES; do
			FILE="/$FILE"
                        HEAD="$(head -c 4 $FILE 2>/dev/null)"
                        if [ "$HEAD" = $'\x7f\x45\x4c\x46' ]; then
                                if [ ! -z "$(strings $FILE | grep "\-PV\-")" ]; then
                                        SIG="true"
                                else    
                                        SIG="false"
                                fi
                                echo "$PACKAGE $REPO $SIG $FILE"
                        fi
                done
        done

}

yum_list() {
	CMD="yum"
	if [ ! -z "$1" ]; then
		CMD="$1"
	fi

	ROWS="$($CMD list installed | grep -v ^Loaded | grep -v ^Installed)"
	echo "$ROWS" | while read ROW; do
		PKG="$(echo "$ROW" | awk '{print $1}')"
		VER="$(echo "$ROW" | awk '{print $2}')"
		REPO="$(echo "$ROW" | awk '{print $3}')"
        	FILES="$(rpm -ql $PKG-$VER)"
		for FILE in $FILES; do
			HEAD="$(head -c 4 $FILE 2>/dev/null)"
			if [ "$HEAD" = $'\x7fELF' ]; then
				if [ ! -z "$(strings --target=ELF $FILE | grep "\-PV\-")" ]; then
					SIG="true"
				else
					SIG="false"
				fi
				echo "$PKG $REPO $SIG $FILE"
			fi
		done
	done
}

dnf_list() {
	yum_list dnf
}

#******************************************************************************#
#                                    main                                      #
#******************************************************************************#

shift
while [ $# -gt 0 ]; do
        case "$1" in
                --help)
                        usage
			exit 1 
                        ;;
                *)
                        echo "Unhandled option '$1'."
                        exit 1
        esac
        shift
done

# make sure we're able to retrieve the distro release id (e.g., alpine, centos, ubuntu) and version id.
DISTRO="$(cat /etc/os-release 2>/dev/null | grep "^ID=" | cut -d '=' -f2 | tr -d '"')"
RELEASE="$(cat /etc/os-release 2>/dev/null | grep "VERSION_ID=" | cut -d "=" -f2 | tr -d '"')"
CODENAME="$(cat /etc/*-release 2>/dev/null | grep "^DISTRIB_CODENAME=" | cut -d '=' -f2 | tr -d '"')"
ARCH="$(uname -m)"

# Try to get PFRAC components from older meta-data in /etc (for CentOS and RHEL)
if [ -z "$DISTRO" ] || [ -z "$RELEASE" ] || [ -z "$ARCH" ]; then
        if [ ! -z "$(cat /etc/*-release | grep ^CentOS)" ]; then
                DISTRO="centos"
                RELEASE="$(cat /etc/*-release | grep ^CentOS | head -n 1 | sed 's/.*release //' | awk '{print $1}')"
        elif [ ! -z "$(cat /etc/*-release | grep ^Red)" ]; then
                DISTRO=rhel
                RELEASE="$(cat /etc/*-release | grep ^Red | head -n 1 | sed 's/.*release //' | awk '{print $1}')"
        else
                echo "Could not determine Linux distro. DISTRO='$DISTRO', RELEASE='$RELEASE', ARCH='$ARCH'. Exiting..." >&2
                exit 1
        fi
fi

case $DISTRO in
        alpine)
                LIST_FUNC="apk_list"
                ;;
        centos | rhel)
                LIST_FUNC="yum_list"
                ;;
        fedora)
                LIST_FUNC="dnf_list"
                ;;
        ubuntu)
                LIST_FUNC="apt_list"
                ;;
        *)
                (>&2 echo "Error: unsupported distro [Distro: '$DISTRO', Release: '$RELEASE', Arch: '$ARCH']" )
                exit 1
                ;;
esac

RESULT="$(strings --version 2>/dev/null)"
if [ $? -ne 0 ]; then
	echo "Please install the strings utility. This is usually in the binutils package."
	exit 1 
fi

eval "$LIST_FUNC"
EXIT_CODE=$?

exit $EXIT_CODE
