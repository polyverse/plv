#!/bin/sh

SHORT_DESCRIPTION="Retrieves the instance_id(s) of the current allocated instance(s)."

#******************************************************************************#
#                                 functions                                    #
#******************************************************************************#

usage() {
cat >&2 <<-EOF
	$SHORT_DESCRIPTION

	Usage:

	  curl https://sh.polyverse.io | sh -s instance-id [<options>]

	Options:

	  --help                 Display usage

EOF
}

getDistro() {
	_DISTRO="$(cat /etc/os-release 2>/dev/null | grep "^ID=" | cut -d '=' -f2 | tr -d '"')"

	if [ -z "$_DISTRO" ] && [ ! -z "$(cat /etc/*-release | grep ^CentOS)" ]; then
		_DISTRO="centos"
	fi

	if [ -z "$_DISTRO" ] && [ ! -z "$(cat /etc/*-release | grep ^Red)" ]; then
		_DISTRO="rhel"
	fi

	if [ -z "$_DISTRO" ]; then
		return 1
	fi

	echo "$_DISTRO"
}

getApkUrls() {
	_ARCH="$1"

	_INDEX_URLs="$(cat /etc/apk/repositories | grep repo.polyverse.io | awk '{print $1"/'$_ARCH'/APKINDEX.tar.gz"}')"
	if [ -z "$_INDEX_URLs" ]; then
		echo "Error: unable to find any repo.polyverse.io entries in /etc/apk/repositories. This only works after Polymorphic Linux is installed. See https://polyverse.io."
		return 1
	fi

        echo "$_INDEX_URLs"
        return 0
}

getRpmUrls() {
	_REPO_FILE="/etc/yum.repos.d/polyverse.repo"

	if [ ! -s "$_REPO_FILE" ]; then
		(>&2 echo "Error: unable to find '$_REPO_FILE'. This only works after Polymorphic Linux is installed. See https://polyverse.io.")
	fi

	# find section headers. starts with [, ends with ], and then strip out the start/end brackets
	_COMPONENTS="$(cat $_REPO_FILE | grep '^\[.*\]$' | sed 's/^\[\(.*\)\]$/\1/' | grep polyverse | grep -v polyverse-mirror)"

	for _COMPONENT in $_COMPONENTS; do
		_BASE_URL="$(cat $_REPO_FILE | awk '/^\['$_COMPONENT'\]/,/^$/' | grep ^baseurl | sed 's/^baseurl=//g')"
		if [ -z "$_BASE_URL" ]; then
			echo "Error: unable to find baseurl= value."
			return 1
		fi

		# if baseurl isn't username:password@ style, then construct it using username= and password=
		if [ -z "$(echo $_BASE_URL | grep @repo.polyverse.io)" ]; then
			_USERNAME="$(cat /etc/yum.repos.d/polyverse.repo | awk '/^\['$_COMPONENT'\]/,/^$/' | grep ^username | sed 's/^username=//g')"
			_PASSWORD="$(cat /etc/yum.repos.d/polyverse.repo | awk '/^\['$_COMPONENT'\]/,/^$/' | grep ^password | sed 's/^password=//g')"

			if [ -z "$_USERNAME" ] || [ -z "$_PASSWORD" ]; then
				echo "Error: baseurl isn't https://<username>:<password>@repo.polyverse.io/... and there's no username= and/or password= field."
				return 1
			fi

			_BASE_URL="$(echo $_BASE_URL | sed -e 's/^https:\/\//https:\/\/'$_USERNAME':'$_PASSWORD'@/g')"
		fi

		_INDEX_URL="$_INDEX_URL $_BASE_URL/repodata/repomd.xml"
	done

	echo "$_INDEX_URL"

	return 0
}

getAptUrls() {
	_INDEX_URLs="$(cat /etc/apt/sources.list | grep repo.polyverse.io | awk '{print $2"/"$3"Packages.xz"}')"
	if [ -z "$_INDEX_URLs" ]; then
		echo "Error: unable to find any repo.polyverse.io entries in /etc/apt/sources.list. This only works after Polymorphic Linux is installed. See https://polyverse.io."
		return 1
	fi

	echo "$_INDEX_URLs"
	return 0
}

#******************************************************************************#
#                                    main                                      #
#******************************************************************************#

# due to the way sh.polyverse.io works, $1 is used to determine which script to run
# but for the script itself, we want to get rid of the first argument
if [ "$1" = "instance-id" ]; then
        shift
fi

while [ $# -gt 0 ]; do
        case "$1" in
                --help)
                        usage
			exit 1
                        ;;
                *)
                        echo "Unhandled argument '$1'."
                        exit 1
        esac
        shift
done

# Make sure we're able to retrieve the distro release id (e.g., alpine, centos, ubuntu) and version id.
DISTRO="$(getDistro)"
ARCH="$(uname -m)"

case $DISTRO in
	alpine)
		URLs="$(getApkUrls $ARCH)"
		;;
	centos|fedora|rhel)
		URLs="$(getRpmUrls)"
		;;
	ubuntu)
		URLs="$(getAptUrls)"
		;;
	*)
		echo "Distro '$DISTRO' not supported."
		exit 1
		;;
esac

if [ $? -ne 0 ]; then
	# if there's a problem with the getXxxUrls() function returns non-zero, the error message is captured in the URLs variable.
	echo "$URLs"
	exit 1
fi

for URL in $URLs; do
	INSTANCE_ID="$(curl -s -i $URL | grep -i ^Instance-Id: | awk '{print $2}')"
	if [ -z "$INSTANCE_ID" ]; then
		(>&2 echo "Error: unable to determine instance-id for index file '$URL'.")
		exit 1
	else
		echo "$INSTANCE_ID"
	fi
done
