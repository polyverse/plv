#!/bin/sh

SHORT_DESCRIPTION="Install Polymorphic Linux"

usage() {
cat >&2 <<-EOF

Install Polymorphic Linux.

Usage:

  curl https://sh.polyverse.io | sh -s install [<options>] <authkey> [<nodeid>]

Options:

  --help                 Display usage.

You can obtain a free trial authkey at https://polyverse.io.

EOF
}

display_reinstall_cmd() {
  echo
  echo "Installation successful! Polyverse is now your preferred repo!"
  echo
  echo "From this point forward, any package you install (or re-install) will be secured"
  echo "by Polyverse."
  echo
  echo "More information available at:"
  echo
  echo "  https://polyverse.io/polymorphic-linux-installation-guide/"
  echo
  echo "If you have any questions, you can reach us at support@polyverse.io."
  echo
}

apk_install() {
	FILE='/etc/apk/repositories'

	# download/install the key
	curl https://repo.polyverse.io/config/apk/3/key -o "/etc/apk/keys/support@polyverse.io-5992017d.rsa.pub"

	# make sure the default repo file exists
	if [ ! -f "$FILE" ]; then
		echo "The default repo file '$FILE' is missing. This is unexpected, so exiting..."
		exit 1
	fi

	# create a backup file
	if [ ! -f "${FILE}.pvbak" ]; then
		echo "Backing up $FILE to ${FILE}.pvbak..."
		cp $FILE ${FILE}.pvbak
		if [ $? -ne 0 ]; then
			echo "Unable to create backup file. This is unexpected, so exiting..."
			exit 1
		fi
	else
		echo "Backup file ${FILE}.pvbak already exists, so we'll leave it alone."
	fi

	# check if there's a previous repo.polyverse.io entry in /etc/apk/repositories file. support script being run multiple times.
	RESULT="$(cat $FILE | grep -i polyverse)"
	if [ ! -z "$RESULT" ]; then
		echo "Detected previous entry for repo.poyverse.io. Restoring from ${FILE}.pvbak..."
		cp ${FILE}.pvbak ${FILE}
	fi
	
	# Update the repositories file
	ESCAPED_TEXT="$(echo "$1" | sed 's/\//\\\//g' | sed 's/$/\\n/' | tr -d '\n')"
	sed -i "1s/^/$ESCAPED_TEXT/" $FILE
	if [ $? -ne 0 ]; then
		echo "The Polyverse repo did not install correctly. Restoring backup. Please contact us at support@polyverse.io."
		mv ${FILE}.pvbak ${FILE}
		if [ $? -ne 0 ]; then
			"Encountered an issue moving the file '${FILE}.pvbak' to '$FILE'. Please perform this manually to complete the rollback."
		fi

		exit 1
	fi

	# Make sure mirrors.polyverse.io uses http instead of https
	sed -i 's/^https.*mirrors\.polyverse\.io/http:\/\/mirrors.polyverse.io/g' $FILE

	# Comment out all the lines that aren't repo.polyverse.io. After re-installing all packages, user must remove #
	sed -in '/repo.polyverse.io/! s/^/#/' $FILE

	display_reinstall_cmd "apk update && apk upgrade --update-cache --available && sed -in 's/^#//g' /etc/apk/repositories"
}

rpm_install() {
	FILE='/etc/yum.repos.d/polyverse.repo'

	curl https://repo.polyverse.io/config/rpm/7/key -o "/etc/pki/RPM-GPG-KEY-Polyverse"

        # create a backup file
        #if [ ! -f "${FILE}.pvbak" ]; then
        #        echo "Backing up $FILE to ${FILE}.pvbak..."
	#	
	#	#FILES="$(ls -p /etc/yum.repos.d | grep -v polyverse.repo | grep -v \.pvbak$ )"
	#	#for x in $FILES; do mv "/etc/yum.repos.d/$x" "/etc/yum.repos.d/${x}.pvbak"; done
        #       #if [ $? -ne 0 ]; then
        #        #        echo "Unable to create backup file. This is unexpected, so exiting..."
        #        #        exit 1
        #        #fi
        #else
        #        echo "Backup files *.pvbak already exists, so we'll leave it alone."
        #fi

	printf "$1" > $FILE

	# check that the file was installed properly
	if [ ! -f "$FILE" ]; then
		echo "The Polyverse repo did not install correctly, please try again or contact Polyverse support. Exiting..."
		exit 1
	fi

	display_reinstall_cmd "yum reinstall -y \*"
}

deb_install() {
	FILE='/etc/apt/sources.list'

	# make sure the default repo file exists
	if [ ! -f "$FILE" ]; then
		echo "The default repo file '$FILE' is missing. This is unexpected, so exiting..."
		exit 1
	fi

	# create a backup file
	if [ ! -f "${FILE}.pvbak" ]; then
		echo "Backing up $FILE to ${FILE}.pvbak..."
		cp $FILE ${FILE}.pvbak
		if [ $? -ne 0 ]; then
			echo "Unable to create backup file. This is unexpected, so exiting..."
			exit 1
		fi
	else
		echo "Backup file ${FILE}.pvbak already exists, so we'll leave it alone."
	fi

	echo "Updating apt cache to insure we get the latest versions."
	apt -qq update

	echo "Installing apt-transport-https to support the https repo endpoint."
	apt -qq install apt-transport-https -y

	echo "Installing the Polyverse public repo key."
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 067A5E87

	# check if there's a previous repo.polyverse.io entry in /etc/apt/sources.list file. support script being run multiple times.
	RESULT="$(cat /etc/apt/sources.list | grep -i polyverse)"
	if [ ! -z "$RESULT" ]; then
		echo "Detected previous entry for repo.poyverse.io. Restoring from ${FILE}.pvbak..."
		cp ${FILE}.pvbak ${FILE}
	fi

	# Update the sources.list file
	ESCAPED_TEXT="$(echo "$1" | sed 's/\//\\\//g' | sed 's/$/\\n/' | tr -d '\n')"
	sed -i "1s/^/$ESCAPED_TEXT/" $FILE
	if [ $? -ne 0 ]; then
		echo "The Polyverse repo did not install correctly. Restoring backup. Please contact us at support@polyverse.io."
		mv ${FILE}.pvbak ${FILE}
		if [ $? -ne 0 ]; then
			"Encountered an issue moving the file '${FILE}.pvbak' to '$FILE'. Please perform this manually to complete the rollback."
		fi
		exit 1
	fi

	display_reinstall_cmd "apt-get update && apt-get -y --allow-change-held-packages install --reinstall \$(dpkg --get-selections | awk '{print \$1}')"
}

encode() {
	str="$1"
	str="$(echo $str | sed 's/ /++/g')"
	str="$(echo $str | sed 's/_/--/g')"
	str="$(echo $str | sed 's/\//\^\^/g')"
	echo "$str"
}

decode() {
	str="$1"
	str="$(echo $str | sed 's/++/ /g')"
	str="$(echo $str | sed 's/--/_/g')"
	str="$(echo $str | sed 's/\^\^/\//g')"
	echo "$str"
}

# Initialization
PFRACs=""
op="install"

if [ "$1" = "install" ]; then
	shift
fi

while [ $# -gt 0 ]; do
	case "$1" in
                --help)
                        usage
                        exit 1
                        ;;
		--add-component)
			shift
			PFRACs="$PFRACs $1"
			;;
		*)
			if [ -z "$AUTH_KEY" ]; then
				AUTH_KEY="$1"
			elif [ -z "$NODE_ID" ]; then
				NODE_ID="$1"
			else
				echo "Error: unexpected argument '$1'."
				exit 1
			fi
	esac
	shift
done

if [ $(id -u) -ne 0 ]; then
	echo "This script must be run as root. Please try running this again as a sudo or root user." 1>&2
	exit 1
fi

if [ -z "$AUTH_KEY" ]; then
	usage
	exit 1
fi

if [ ! -f /usr/bin/curl ]; then
	echo "This script requires curl. Please install it and try running this again." 1>&2
	exit 1
fi

if [ "$NODE_ID" = "" ]; then NODE_ID="$HOSTNAME"; fi
if [ "$NODE_ID" = "" ]; then
	echo "Error: couldn't auto-generate a node id. Please re-run and explicitly provide a node_id value. Exiting..." >&2
	exit 1
fi

# make sure we're able to retrieve the distro release id (e.g., alpine, centos, ubuntu) and version id.
DISTRO="$(cat /etc/os-release 2>/dev/null | grep "^ID=" | cut -d '=' -f2 | tr -d '"')"
RELEASE="$(cat /etc/os-release 2>/dev/null | grep "VERSION_ID=" | cut -d "=" -f2 | tr -d '"')"
CODENAME="$(cat /etc/*-release 2>/dev/null | grep "^DISTRIB_CODENAME=" | cut -d '=' -f2 | tr -d '"')"
ARCH="$(uname -m)"

if [ "$DISTRO" == "alpine" ] && [ -f "/etc/apk/arch" ]; then
	ARCH="$(cat /etc/apk/arch)"
fi

# Try to get PFRAC components from older meta-data in /etc (for CentOS and RHEL)
if [ -z "$DISTRO" ] || [ -z "$RELEASE" ] || [ -z "$ARCH" ]; then
        if [ ! -z "$(cat /etc/*-release | grep ^CentOS)" ]; then
                DISTRO="centos"
                RELEASE="$(cat /etc/*-release | grep ^CentOS | head -n 1 | sed 's/.*release //' | awk '{print $1}')"
		if [ "$RELEASE" == "6.9" ] || [ "$RELEASE" == "6.10" ]; then
			RELEASE="6"
		fi
        elif [ ! -z "$(cat /etc/*-release | grep ^Red)" ]; then
                DISTRO=rhel
                RELEASE="$(cat /etc/*-release | grep ^Red | head -n 1 | sed 's/.*release //' | awk '{print $1}')"
        else
                echo "Could not determine Linux distro. DISTRO='$DISTRO', RELEASE='$RELEASE', ARCH='$ARCH'. Exiting..." >&2
                exit 1
        fi
fi

INSTALL_FUNCTION=""
case $DISTRO in
	alpine)
		# make 3.x vs 3.x.x
		RELEASE="$(echo $RELEASE | awk -F'.' '{print $1"."$2}')"

		PFRACs="$PFRACs alpine_apk_${RELEASE}_$(encode "$ARCH")_main"
		PFRACs="$PFRACs alpine_apk_${RELEASE}_$(encode "$ARCH")_community"

		INSTALL_FUNCTION="apk_install"
		;;
	centos | fedora)
		PFRACs="$PFRACs ${DISTRO}_rpm_${RELEASE}_x86--64_os"
		PFRACs="$PFRACs ${DISTRO}_rpm_${RELEASE}_x86--64_updates"

		INSTALL_FUNCTION="rpm_install"
		;;
        rhel)
		# make 7 vs. 7.6
		RELEASE="$(echo $RELEASE | awk -F'.' '{print $1}')"

                PFRACs="$PFRACs ${DISTRO}_rpm_${RELEASE}_x86--64_server"

                INSTALL_FUNCTION="rpm_install"
                ;;
	ubuntu)
		PFRACs="$PFRACs ubuntu_deb_${CODENAME}_binary--amd64_main "
		PFRACs="$PFRACs ubuntu_deb_${CODENAME}-updates_binary--amd64_main"
		PFRACs="$PFRACs ubuntu_deb_${CODENAME}-security_binary--amd64_main"

		INSTALL_FUNCTION="deb_install"
		;;
	*)
		echo "Distro '$DISTRO' not supported."
		exit 1
		;;
esac

REPO_FILE_CONTENTS=""
for PFRAC in $PFRACs
do
	P="$(decode $(echo $PFRAC | awk -F'_' '{print $1}'))"
	F="$(decode $(echo $PFRAC | awk -F'_' '{print $2}'))"
	R="$(decode $(echo $PFRAC | awk -F'_' '{print $3}'))"
	A="$(decode $(echo $PFRAC | awk -F'_' '{print $4}'))"
	C="$(decode $(echo $PFRAC | awk -F'_' '{print $5}'))"

	URL="https://repo.polyverse.io/register?authKey=$AUTH_KEY&nodeID=${NODE_ID}_${PFRAC}&nodeName=$NODE_ID&distro=$DISTRO&project=$P&format=$F&release=$R&arch=$A&component=$C"
	echo "$URL"

	# 'wget --content-on-error -qO- "$URL"' doesn't work reliably across distros
	COMPONENT_FILE_PART="$(curl -s --insecure --fail "$URL")"
	EXIT_CODE=$?

	if [ $EXIT_CODE -ne 0 ]; then
		# can't get errror code and body at the same time, so need to fetch the error message
		RESULT="$(curl -s --insecure "$URL")"
		echo "Registration error: $RESULT"
		exit 1
	fi

	REPO_FILE_CONTENTS="${REPO_FILE_CONTENTS}${COMPONENT_FILE_PART}\n\n"
done

$INSTALL_FUNCTION "$REPO_FILE_CONTENTS"
