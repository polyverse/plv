#!/bin/sh

if [ -z "$PV_BASE_URL" ]; then PV_BASE_URL="https://sh.polyverse.com"; fi

#******************************************************************************#
#                                 functions                                    #
#******************************************************************************#

usage() {
cat >&2 <<-EOF

Put a change event to a specified CloudWatch log stream.

Usage:

  curl https://sh.polyverse.com | sh -s log-change-event <options>

Options:

  --log-group            CloudWatch log group
  --log-stream           CloudWatch log stream
  --event-type           Event type (e.g., "Deployment")
  --service-name         Name of service this event applies to
  --stack-name           Name of environment this event applies to
  --version-id           Version of code/bits this event applies to
  --region               AWS region
  [--docs-link]          URL to documentation
  [--help]               Display usage.

EOF
}

_eval() {
	(>&2 echo "+ $1")
	eval "$1"
	return $?
}

getDateCommand() {
        case "$(uname)" in
                Darwin)
                        echo "gdate"
                        ;;
                Linux)
                        echo "date"
                        ;;
                *)
                        (>&2 echo "Error: unsupported OS '$(uname)'.")
                        return 1
                        ;;
        esac

	return 0
}

addToMessage() {
	_MESSAGE="$1"
	_KEY="$2"
	_VAL="$3"

	if [ ! -z "$_MESSAGE" ]; then
		_MESSAGE="$_MESSAGE,"
	fi

	_MESSAGE="$_MESSAGE\\\"$_KEY\\\":\\\"$_VAL\\\""
	echo "$_MESSAGE"
	return 0
}

#******************************************************************************#
#                                    main                                      #
#******************************************************************************#

# due to the way sh.polyverse.com works, $1 is used to determine which script to run
# but for the script itself, we want to get rid of the first argument
if [ "$1" = "log-change-event" ]; then
        shift
fi

PV_LOG_GROUP=""
PV_LOG_STREAM=""
PV_EVENT_TYPE=""
PV_SERVICE_NAME=""
PV_STACK_NAME=""
PV_VERSION_ID=""
PV_DOCS_LINK=""
PV_EVENT_ID="$(base64 < /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo '')"

POST_JSON=""
POST_JSON="$(addToMessage "$POST_JSON" "EventID" "$PV_EVENT_ID")"
# enumerate all the command-line arguments and set variables accordingly
while [ $# -gt 0 ]; do
        case $1 in
                --log-group)
                        shift
                        PV_LOG_GROUP="$1"
                        ;;
                --log-stream)
                        shift
                        PV_LOG_STREAM="$1"
                        ;;
                --event-type)
			shift
                        PV_EVENT_TYPE="$1"
			POST_JSON="$(addToMessage "$POST_JSON" "EventType" "$PV_EVENT_TYPE")"
                        ;;
                --region)
			shift
			PV_AWS_REGION="--region $1"
			;;
                --service-name)
                        shift
			PV_SERVICE_NAME="$1"
			POST_JSON="$(addToMessage "$POST_JSON" "Service" "$PV_SERVICE_NAME")"
                        ;;
                --stack-name)
			shift
                        PV_STACK_NAME="$1"
			POST_JSON="$(addToMessage "$POST_JSON" "Stack" "$PV_STACK_NAME")"
                        ;;
		--version-id)
			shift
			PV_VERSION_ID="$1"
			POST_JSON="$(addToMessage "$POST_JSON" "Version" "$PV_VERSION_ID")"
			;;
		--docs-link)
			shift
			PV_DOCS_LINK="$1"
			POST_JSON="$(addToMessage "$POST_JSON" "DocsLink" "$PV_DOCS_LINK")"
			;;
                --help)
                        usage
                        exit 1
                        ;;
                *)
                        echo "ERROR: Unhandled argument '$1'."
                        exit 1
        esac
        shift
done

_eval "aws --version"
if [ $? -ne 0 ]; then
        echo "Error: AWS CLI is not installed."
        exit 1
fi

PV_AWS_USER="$(aws iam get-user 2>&1 | tr " " "\n" | tr "," "\n" | tr "\"" "\n" | grep arn:)"
if [ -z "$PV_AWS_USER" ]; then
        echo "Error: Unable to determine AWS user. AWS CLI may not be configured."
        exit 1
fi
POST_JSON="$(addToMessage "$POST_JSON" "AwsUser" "$PV_AWS_USER")"

DATECMD="$(getDateCommand)"
_eval "$DATECMD"
if [ $? -ne 0 ]; then
        echo "Error: cannot find executable '$DATECMD'. Please install it (e.g., homebrew install coreutils)."
        exit 1
fi

_eval "curl --version"
if [ $? -ne 0 ]; then
        echo "Error: Missing curl command. Please install it and try again."
        exit 1
fi

if [ -z "$PV_LOG_GROUP" ] || [ -z "$PV_LOG_STREAM" ] || [ -z "$PV_EVENT_TYPE" ] || [ -z "$PV_SERVICE_NAME" ] || [ -z "$PV_STACK_NAME" ] || [ -z "$PV_VERSION_ID" ]; then
	echo "Error: missing required argument."
	exit 1
fi

if [ -z "$PV_MESSAGE" ]; then
	PV_MESSAGE="Deployed service:$PV_SERVICE_NAME, version:$PV_VERSION_ID, stack:$PV_STACK_NAME, user:$PV_AWS_USER."
fi

PV_ISO8601_UTC_TIMESTAMP="$($DATECMD --utc +%FT%TZ)"
POST_JSON="[{\"timestamp\":$($DATECMD +%s%3N),\"message\":\"{\\\"Event\\\":\\\"Change\\\",\\\"Message\\\":{$POST_JSON},\\\"level\\\":\\\"info\\\",\\\"time\\\":\\\"$PV_ISO8601_UTC_TIMESTAMP\\\",\\\"msg\\\":\\\"$PV_MESSAGE\\\"}\"}]"

NEXT_SEQUENCE_TOKEN="$(_eval "aws logs describe-log-streams $PV_AWS_REGION --log-group-name $PV_LOG_GROUP | grep uploadSequenceToken | awk -F\\\" '{print \$4}'")"
echo "$NEXT_SEQUENCE_TOKEN"

_eval "aws logs put-log-events $PV_AWS_REGION --log-group-name $PV_LOG_GROUP --log-stream-name $PV_LOG_STREAM --log-events '$POST_JSON' --sequence-token $NEXT_SEQUENCE_TOKEN"
