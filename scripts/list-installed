#!/bin/sh

SHORT_DESCRIPTION="List installed packages, version and source repo."

if [ -z "$PV_BASE_URL" ]; then PV_BASE_URL="https://sh.polyverse.com"; fi

#******************************************************************************#
#                                 functions                                    #
#******************************************************************************#

usage() {
cat >&2 <<-EOF

List installed packages, version and source repo. Useful to check whether an
installed package came from Polyverse.

Usage:

  curl https://sh.polyverse.com | sh -s list-installed [<options>]

Options:

  --help                 Display usage.

EOF
}

apk_list() {
	INSTALLED="$(apk info 2>/dev/null)"

	for PACKAGE in $INSTALLED; do
		POLICY="$(apk policy $PACKAGE 2>/dev/null | grep lib/apk/db/installed -A 1 -B 1)"
		VERSION="$(echo "$POLICY" | grep lib/apk/db/installed -A 1 -B 1 | head -n 1 | tail -n 1 | awk -F: '{print $1}' | xargs)"
		REPO_SOURCE="$(echo "$POLICY" | grep lib/apk/db/installed -A 1 -B 1 | head -n 3 | tail -n 1 | grep http | sed -e 's/alpine.*@//g' | xargs)"
		if [ "$REPO_SOURCE" = "" ]; then
			REPO_SOURCE="(local)"
		fi
		echo "$PACKAGE $VERSION $REPO_SOURCE" | tee -a $TEMP_FILE
	done
}

apt_list() {
	INSTALLED="$(apt list --installed 2>/dev/null | tail -n +2 | awk -F/ '{print $1}')"

	for PACKAGE in $INSTALLED; do
		POLICY="$(apt-cache policy $PACKAGE)"
		VERSION="$(echo "$POLICY" | grep Installed: | awk '{print $2}')"
		REPO_SOURCE="$(echo "$POLICY" | awk '/\*\*\*/,/100 /' | grep http | awk '{print $2}' | xargs | sed 's/ /,/g')"
		if [ "$REPO_SOURCE" = "" ]; then
			REPO_SOURCE="(local)"
		fi
		echo "$PACKAGE $VERSION $REPO_SOURCE" | tee -a $TEMP_FILE
	done
}

yum_list() {
	YUM_CMD="yum"
	if [ "$DISTRO" = "fedora" ]; then
		YUM_CMD="dnf"
	fi

	LINES="$($YUM_CMD list installed -q | grep -v ^Installed)"

	# ugly hack due to https://bugzilla.redhat.com/show_bug.cgi?id=584525
	for FIELD in $LINES; do
		if [ -z $PACKAGE ]; then
			PACKAGE=$FIELD
			continue
		fi

		if [ -z $VERSION ]; then
			VERSION=$FIELD
			continue
		fi

		REPO=$FIELD

		echo "$PACKAGE $VERSION $REPO" | tee -a $TEMP_FILE

		PACKAGE=""
		VERSION=""
		REPO=""
	done
}

dnf_list() {
	yum_list
}

#******************************************************************************#
#                                    main                                      #
#******************************************************************************#

shift
while [ $# -gt 0 ]; do
        case "$1" in
                --help)
                        usage
			exit 1 
                        ;;
                *)
                        echo "Unhandled option '$1'."
                        exit 1
        esac
        shift
done

INFO="$(curl -sS $PV_BASE_URL | sh -s info)"

DISTRO="$(echo "$INFO" | grep ^DISTRO= | awk -F= '{print $2}')"
RELEASE="$(echo "$INFO" | grep ^RELEASE= | awk -F= '{print $2}')"
ARCH="$(echo "$INFO" | grep ^ARCH= | awk -F= '{print $2}')"

if [ -z "$DISTRO" ] || [ -z "$RELEASE" ] || [ -z "$ARCH" ]; then
	(>&2 echo "Could not determine Linux distro. DISTRO='$DISTRO', RELEASE='$RELEASE', ARCH='$ARCH'. Exiting...")
	exit 1
fi

case $DISTRO in
	alpine)
		LIST_FUNC="apk_list"
		;;
	centos | rhel)
		LIST_FUNC="yum_list"
		;;
	fedora)
		LIST_FUNC="dnf_list"
		;;
	ubuntu)
		LIST_FUNC="apt_list"
		;;
	*)
		(>&2 echo "Error: unsupported distro [Distro: '$DISTRO', Release: '$RELEASE', Arch: '$ARCH']" )
		exit 1
		;;
esac

TEMP_FILE=`mktemp`

eval "$LIST_FUNC"
EXIT_CODE=$?

#PACKAGES_FROM_PV="$(cat $TEMP_FILE | grep polyverse | grep -v polyverse-mirror | wc -l)"
#TOTAL_PACKAGES="$(cat $TEMP_FILE | wc -l)"

#(>&2 echo "Packages from repo.polyverse.io: $PACKAGES_FROM_PV/$TOTAL_PACKAGES" )
rm $TEMP_FILE 2>/dev/null || true

exit $EXIT_CODE
